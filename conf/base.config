/*
 * -------------------------------------------------
 *  nf-core/lncpipe Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  container = params.container

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements

  withName:combine_public_annotation {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:Run_fastQC {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:Run_FastP {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:fastq_star_alignment_For_discovery {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:fastq_tophat_alignment_For_discovery {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:fastq_hisat2_alignment_For_discovery {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:StringTie_assembly {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:StringTie_merge_assembled_gtf {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:Cufflinks_assembly {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:cuffmerge_assembled_gtf {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withName:Merge_assembled_gtf_with_GENCODE {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withName:Identify_novel_lncRNA_with_criterions {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }

  withName:Predict_coding_abilities_by_PLEK {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
  }
  withName:Predict_coding_abilities_by_CPAT {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
  }


  withName:Filter_lncRNA_by_coding_potential_result {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }

  withName:Summary_renaming_and_classification {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }


  withName:Rerun_CPAT_to_evaluate_lncRNA {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }

  withName:Rerun_CPAT_to_evaluate_coding {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }


  withName:Run_htseq_for_quantification {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }

  withName:Run_htseq_for_quantification {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:Build_kallisto_index_of_GTF_for_quantification {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
  }
  withName:Run_kallisto_for_quantification {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
  }



  withName:get_software_versions {
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    errorStrategy = 'ignore'
  }
  withName:workflow_summary_mqc {
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    executor = 'local'
    errorStrategy = 'ignore'
  }
}


params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}
